# Prediction
predict1 <- predict(model1,newdata=test) # Prediction provides the latent predicted values of the variables (positive and negative)
# Let's compare the two models
table(predict1 <= 0, test$time_in_affairs==0)
#       FALSE TRUE
# FALSE    92   43
# TRUE    523 1252
#
table(predict2 <= 0, test$time_in_affairs==0)
predict2 <- predict(model2, data=test)
str(predict2)
predict2
c() -> names(predict2)
predict1
#       FALSE TRUE
# FALSE    92   43
# TRUE    523 1252
#
table(predict2 <= 0, test$time_in_affairs==0)
#       FALSE TRUE
# FALSE    92   43
# TRUE    523 1252
#
table(predict2 <= 0, test$time_in_affairs==0)
# Benchmark model: linear regression
model2 <- lm(time_in_affairs~., data=train)
summary(model2)
predict2 <- predict(model2, data=test)
# Let's compare the two models
table(predict1 <= 0, test$time_in_affairs==0)
#       FALSE TRUE
# FALSE    92   43
# TRUE    523 1252
#
table(predict2 <= 0, test$time_in_affairs==0)
predict2 <- predict(model2, newdata =test)
#       FALSE TRUE
# FALSE    92   43
# TRUE    523 1252
#
table(predict2 <= 0, test$time_in_affairs==0)
# Remove all variables from the R environment to create a fresh start
rm(list=ls())
# Load the "survival" package
if(!require(survival)){
install.packages("survival")
library(survival)
}
# heart.csv data (These data come from the Stanford Heart Transplantation Program)
#
# The goal is to estimate the survival of patients from the data and understand the effect that other explanatory variables may have
# (on whether transplantation helps). Note that in some cases the appropriate heart for transplant might note be available, and patients
# need to wait for it. This study was conducted in April 1, 1974. The survival time is censored if the patient drops out of program
# (no follow up information) or the patient is alive at the time if the end of the study.
#
# We start by reading the "heart.csv" file
heart <- read.csv("heart.csv")
str(heart)
# 172 observations for 7 variables:
# start, stop: entry and exit times for this time interval (in days)
# event: 1 = dead, 0 = alive
# age: age at the start of the programme
# surgery: prior bypass surgery (1 = yes, 0 = no)
# transplant: received transplant (1 = yes, 0 = no)
# id: patient ID
#
unique(heart$id) # so we have a total of 103 patients
#
# Let's take a look at some specific patients:
subset(heart,id==1)   # Patient 1 died at the age of 31 without going through a transplant
subset(heart,id==25)  # Patient 25 was alive at the end of the programme.
# Let's check the "survfit" and "Surv" functions
?Surv    # Create a survival object, usually used as a response variable in a model formula.
?survfit # Create survival curves
# Estimate the survival function and store it in the variable "km"
km <- survfit(Surv(start,stop,event)~1,data=heart)
summary(km,censored=TRUE) # summary of the model, with patients' survival probability
# plot the Kaplan-Meier curve along with 95% confidence interval
plot(km)
# let's take a detailed look at the results
subset(heart,stop==1)
subset(heart,stop==2)
# Check "coxph" function
?coxph
summary(km,censored=TRUE) # summary of the model, with patients' survival probability
plot(km$n.event)
plot(km$n.risk)
# Modelling
cox <- coxph(Surv(start,stop,event)~age+surgery+transplant, data=heart)
summary(cox)
# Visual analysis
plot(survfit(cox))
summary(survfit(cox))
# Visual analysis
plot(survfit(cox))
getwd()
setwd("../Cyber-Attack-Prediction")
getwd()
# Remove all variables from the R environment to create a fresh start
rm(list=ls())
# Load datasets
train1 <- read.csv("train_dataset01.csv")
train2 <- read.csv("train_dataset02.csv")
test <- read.csv("test_dataset.csv")
# Look at summaries
summary(train1)
summary(train2)
summary(test)
# Remove all variables from the R environment to create a fresh start
rm(list=ls())
# Load datasets
train1 <- read.csv("train_dataset01.csv")
train2 <- read.csv("train_dataset02.csv")
test <- read.csv("test_dataset.csv")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(ggplot2)
races %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
library(tidyverse)
library(ggplot2)
train2 %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
library(tidyverse)
library(ggplot2)
train2 %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
library(tidyverse)
library(ggplot2)
ggplot(train2, aes(value)) +
facet_wrap(~. , scales = "free") +
geom_histogram()
library(tidyverse)
library(ggplot2)
ggplot(train2, aes(value)) +
facet_wrap(~., scales = "free") +
geom_histogram()
library(tidyverse)
library(ggplot2)
ggplot(train2, aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
library(tidyverse)
library(ggplot2)
train2 %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
library(tidyverse)
library(ggplot2)
train2[train2$ATT_FLAG == "True",] %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
train2[train2$ATT_FLAG == "False",] %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
library(tidyverse)
library(ggplot2)
train2[train2$ATT_FLAG == "True",] %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(binwidth = 10)
train2[train2$ATT_FLAG == "False",] %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(binwidth = 10)
library(tidyverse)
library(ggplot2)
train2[train2$ATT_FLAG == "True",] %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(binwidth = 20)
train2[train2$ATT_FLAG == "False",] %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(binwidth = 20)
library(tidyverse)
library(ggplot2)
train2[train2$ATT_FLAG == "True",] %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(binwidth = 20)
train2[train2$ATT_FLAG == "False",] %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(binwidth = 20)
table(train2$ATT_FLAG)
table(train2$ATT_FLAG)
str(train1)
str(train2)
distribution <- table(train2$ATT_FLAG)
distribution[0]
distribution <- table(train2$ATT_FLAG)
distribution[1]
distribution
distribution <- table(train2$ATT_FLAG)
distribution
# Precision
precision <- distribution[2]/sum(distribution)
precision
# Recall
recall <- distribution[2]/distribution[2]
recall
# F score
(2 * precision * recall)/(precision + recall)
1968/sum(distribution)
str(train2)
trains2$cats
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU3", "STATUS_PU4", "STATUS_PU5", "STATUS_PU6", "STATUS_PU7", "STATUS_PU8",
"STATUS_PU9",  "STATUS_PU10",  "STATUS_PU11", "STATUS_V2")
train2$cats
train2[,cats]
train2[,cats] %>% group_by(ATT_FLAG) %>% summarise(Freq=n())
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU3", "STATUS_PU4", "STATUS_PU5", "STATUS_PU6", "STATUS_PU7", "STATUS_PU8",
"STATUS_PU9",  "STATUS_PU10",  "STATUS_PU11", "STATUS_V2", "ATT_FLAG")
train2[,cats] %>% group_by(ATT_FLAG) %>% summarise(Freq=n())
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU3", "STATUS_PU4", "STATUS_PU5", "STATUS_PU6", "STATUS_PU7", "STATUS_PU8",
"STATUS_PU9",  "STATUS_PU10",  "STATUS_PU11", "STATUS_V2", "ATT_FLAG")
train2 %>% group_by(cats) %>% summarise(Freq=n())
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU3", "STATUS_PU4", "STATUS_PU5", "STATUS_PU6", "STATUS_PU7", "STATUS_PU8",
"STATUS_PU9",  "STATUS_PU10",  "STATUS_PU11", "STATUS_V2", "ATT_FLAG")
train2 %>% group_by(cats) %>% summarise(Freq=n())
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU3", "STATUS_PU4", "STATUS_PU5", "STATUS_PU6", "STATUS_PU7", "STATUS_PU8",
"STATUS_PU9",  "STATUS_PU10",  "STATUS_PU11", "STATUS_V2", "ATT_FLAG")
table(train2[train2$ATT_FLAG == "True", cats])
library(tidyverse)
library(ggplot2)
train2[train2$ATT_FLAG == "True",] %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(binwidth = 25)
train2[train2$ATT_FLAG == "False",] %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(binwidth = 25)
?table
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU3", "STATUS_PU4", "STATUS_PU5", "STATUS_PU6", "STATUS_PU7", "STATUS_PU8",
"STATUS_PU9",  "STATUS_PU10",  "STATUS_PU11", "STATUS_V2", "ATT_FLAG")
prop.table(table(train2[train2$ATT_FLAG == "True", cats]))
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU3", "STATUS_PU4", "STATUS_PU5", "STATUS_PU6", "STATUS_PU7", "STATUS_PU8",
"STATUS_PU9",  "STATUS_PU10",  "STATUS_PU11", "STATUS_V2", "ATT_FLAG")
prop.table(table(train2[train2$ATT_FLAG == "True", cats]), margin=2)
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU3", "STATUS_PU4", "STATUS_PU5", "STATUS_PU6", "STATUS_PU7", "STATUS_PU8",
"STATUS_PU9",  "STATUS_PU10",  "STATUS_PU11", "STATUS_V2", "ATT_FLAG")
table(train2[train2$ATT_FLAG == "True", cats])
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU3", "STATUS_PU4", "STATUS_PU5", "STATUS_PU6", "STATUS_PU7", "STATUS_PU8",
"STATUS_PU9",  "STATUS_PU10",  "STATUS_PU11", "STATUS_V2", "ATT_FLAG")
train2[train2$ATT_FLAG == "True", cats]
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU3", "STATUS_PU4", "STATUS_PU5", "STATUS_PU6", "STATUS_PU7", "STATUS_PU8",
"STATUS_PU9",  "STATUS_PU10",  "STATUS_PU11", "STATUS_V2", "ATT_FLAG")
table(train2[train2$ATT_FLAG == "True", cats], c("True", "False"))
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU3", "STATUS_PU4", "STATUS_PU5", "STATUS_PU6", "STATUS_PU7", "STATUS_PU8",
"STATUS_PU9",  "STATUS_PU10",  "STATUS_PU11", "STATUS_V2", "ATT_FLAG")
sapply(train2[train2$ATT_FLAG == "True", cats], table)
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU3", "STATUS_PU4", "STATUS_PU5", "STATUS_PU6", "STATUS_PU7", "STATUS_PU8",
"STATUS_PU9",  "STATUS_PU10",  "STATUS_PU11", "STATUS_V2", "ATT_FLAG")
rbind(sapply(train2[train2$ATT_FLAG == "True", cats], table))
cbind(sapply(train2[train2$ATT_FLAG == "True", cats], table))
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU3", "STATUS_PU4", "STATUS_PU5", "STATUS_PU6", "STATUS_PU7", "STATUS_PU8",
"STATUS_PU9",  "STATUS_PU10",  "STATUS_PU11", "STATUS_V2", "ATT_FLAG")
sapply(train2[train2$ATT_FLAG == "True", cats], table)
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU4", "STATUS_PU6", "STATUS_PU7", "STATUS_PU10",  "STATUS_PU11", "STATUS_V2", "ATT_FLAG")
sapply(train2[train2$ATT_FLAG == "True", cats], table)
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU4", "STATUS_PU6", "STATUS_PU7", "STATUS_PU10",  "STATUS_PU11", "STATUS_V2", "ATT_FLAG")
prop.table(sapply(train2[train2$ATT_FLAG == "True", cats], table), 1)
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU4", "STATUS_PU6", "STATUS_PU7", "STATUS_PU10",  "STATUS_PU11", "STATUS_V2", "ATT_FLAG")
sapply(train2[train2$ATT_FLAG == "True", cats], table)
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU4", "STATUS_PU6", "STATUS_PU7", "STATUS_PU10",  "STATUS_PU11", "STATUS_V2", "ATT_FLAG")
sapply(train2[train2$ATT_FLAG == "True", cats], table)
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU4", "STATUS_PU6", "STATUS_PU7", "STATUS_PU10",  "STATUS_PU11", "STATUS_V2", "ATT_FLAG")
sapply(train2[train2$ATT_FLAG == "True", cats], table)
prop.table(sapply(train2[train2$ATT_FLAG == "True", cats], table), margin = 2)
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU4", "STATUS_PU6", "STATUS_PU7", "STATUS_PU10",  "STATUS_PU11", "STATUS_V2", "ATT_FLAG")
prop.table(sapply(train2[train2$ATT_FLAG == "True", cats], table), margin = 2)
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU4", "STATUS_PU6", "STATUS_PU7", "STATUS_PU10",  "STATUS_PU11", "STATUS_V2")
prop.table(sapply(train2[train2$ATT_FLAG == "True", cats], table), margin = 2)
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU4", "STATUS_PU6", "STATUS_PU7", "STATUS_PU10",  "STATUS_PU11", "STATUS_V2")
# Proportion table for obs with attacks
prop.table(sapply(train2[train2$ATT_FLAG == "True", cats], table), margin = 2)
# Proportion table for obs without attacks
prop.table(sapply(train2[train2$ATT_FLAG == "False", cats], table), margin = 2)
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU4", "STATUS_PU6", "STATUS_PU7", "STATUS_PU10",  "STATUS_PU11", "STATUS_V2")
# Proportion table for obs with attacks
prop.table(sapply(train2[train2$ATT_FLAG == "True", cats], table), margin = 2)
# Proportion table for obs without attacks
prop.table(sapply(train2[train2$ATT_FLAG == "False", cats], table), margin = 2)
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU4", "STATUS_PU6", "STATUS_PU7", "STATUS_PU10",  "STATUS_PU11", "STATUS_V2")
# Proportion table for obs with attacks
prop.table(sapply(train2[train2$ATT_FLAG == "True", cats], table), margin = 2)
print("\n")
# Proportion table for obs without attacks
prop.table(sapply(train2[train2$ATT_FLAG == "False", cats], table), margin = 2)
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU4", "STATUS_PU6", "STATUS_PU7", "STATUS_PU10",  "STATUS_PU11", "STATUS_V2")
# Proportion table for obs with attacks
prop.table(sapply(train2[train2$ATT_FLAG == "True", cats], table), margin = 2)
print("\\n")
# Proportion table for obs without attacks
prop.table(sapply(train2[train2$ATT_FLAG == "False", cats], table), margin = 2)
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU4", "STATUS_PU6", "STATUS_PU7", "STATUS_PU10",  "STATUS_PU11", "STATUS_V2")
# Proportion table for obs with attacks
prop.table(sapply(train2[train2$ATT_FLAG == "True", cats], table), margin = 2)
print("")
# Proportion table for obs without attacks
prop.table(sapply(train2[train2$ATT_FLAG == "False", cats], table), margin = 2)
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU4", "STATUS_PU6", "STATUS_PU7", "STATUS_PU10",  "STATUS_PU11", "STATUS_V2")
# Proportion table for obs with attacks
prop.table(sapply(train2[train2$ATT_FLAG == "True", cats], table), margin = 2)
println("")
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU4", "STATUS_PU6", "STATUS_PU7", "STATUS_PU10",  "STATUS_PU11", "STATUS_V2")
# Proportion table for obs with attacks
prop.table(sapply(train2[train2$ATT_FLAG == "True", cats], table), margin = 2)
println()
cats = c("STATUS_PU1", "STATUS_PU2", "STATUS_PU4", "STATUS_PU6", "STATUS_PU7", "STATUS_PU10",  "STATUS_PU11", "STATUS_V2")
# Proportion table for obs with attacks
prop.table(sapply(train2[train2$ATT_FLAG == "True", cats], table), margin = 2)
# Proportion table for obs without attacks
prop.table(sapply(train2[train2$ATT_FLAG == "False", cats], table), margin = 2)
str(train2)
?ttest
?t.test
t.test(train2[train2$ATT_FLAG == "True", cats], train2[train2$ATT_FLAG == "False", cats])
t.test(train2$STATUS_PU1[train2$ATT_FLAG == "True"], train2$STATUS_PU1[train2$ATT_FLAG == "False"])
t.test(train2$STATUS_PU1[train2$ATT_FLAG == "True"] ~ train2$STATUS_PU1[train2$ATT_FLAG == "False"])
# Convert factors to logical
train2.processed <- train2
train2.processed$cats <- as.logical(train2.processed$cats)
as.logical(train2.processed$cats)
# Convert factors to logical
train2.processed <- train2
as.logical(train2.processed$cats)
str(train2.processed)
as.logical(train2.processed$STATUS_PU1)
as.logical(train2.processed$cats)
as.logical(train2.processed[,cats])
# Convert factors to logical
train2.processed <- train2
for (col in cats) {
train2.processed$col <- as.logical(train2.processed$col)
}
# Convert factors to logical
train2.processed <- train2
for (col in cats) {
train2.processed$col
train2.processed$col <- as.logical(train2.processed$col)
}
# Convert factors to logical
train2.processed <- train2
for (col in cats) {
train2.processed$col
#train2.processed$col <- as.logical(train2.processed$col)
}
# Convert factors to logical
train2.processed <- train2
for (col in cats) {
train2.processed$col <- as.logical(train2.processed$col)
}
# Convert factors to logical
train2.processed <- train2
train2.processed$cats <- train2.processed$cats == "True"
# Convert factors to logical
train2.processed <- train2
train2.processed$cats == "True"
str(train2.processed)
# Convert factors to logical
train2.processed <- train2
for (col in cats) {
train2.processed$col <- train2.processed$col == "True"
}
class(train2.processed$STATUS_PU1)
factor(train2.processed$STATUS_PU1)
rm(train2.processed)
t.test(train2$ATT_FLAG, train2$STATUS_PU1)
table(as.logical(train2$ATT_FLAG))
t.test(as.logical(train2$ATT_FLAG), as.logical(train2$STATUS_PU1))
t.test(as.logical(train2$STATUS_PU1[train2$ATT_FLAG == T]), as.logical(train2$STATUS_PU1[train2$ATT_FLAG == F]))
t.test(as.logical(train2$STATUS_PU1[train2$ATT_FLAG == "True"]), as.logical(train2$STATUS_PU1[train2$ATT_FLAG == "False"]))
for (col in cats) {
t.test(
as.logical(train2$col[train2$ATT_FLAG == "True"]),
as.logical(train2$col[train2$ATT_FLAG == "False"])
)
}
for (col in cats) {
t.test(
as.logical(train2$col[train2$ATT_FLAG == "True"]),
as.logical(train2$col[train2$ATT_FLAG == "False"])
)
}
for (col in cats) {
t.test(
as.logical(train2$col[train2$ATT_FLAG == "True"]),
as.logical(train2$col[train2$ATT_FLAG == "False"])
)
}
for (col in cats) {
tryCatch(
{
t.test(
as.logical(train2$col[train2$ATT_FLAG == "True"]),
as.logical(train2$col[train2$ATT_FLAG == "False"])
)
},
error=function(cond) {
return(NA)
}
)
}
for (col in cats) {
tryCatch(
{
t.test(
as.logical(train2$col[train2$ATT_FLAG == "True"]),
as.logical(train2$col[train2$ATT_FLAG == "False"])
)
},
error=function(cond) {
}
)
}
for (col in cats) {
t.test(
as.logical(train2[train2$ATT_FLAG == "True", col]),
as.logical(train2[train2$ATT_FLAG == "False", col])
)
}
for (col in cats) {
t.test(
as.logical(train2[train2$ATT_FLAG == "True", col]),
as.logical(train2[train2$ATT_FLAG == "False", col])
)
}
for (col in cats) {
result <- t.test(
as.logical(train2[train2$ATT_FLAG == "True", col]),
as.logical(train2[train2$ATT_FLAG == "False", col])
)
print(result)
}
for (col in cats) {
result <- t.test(
as.logical(train2[train2$ATT_FLAG == "True", col]),
as.logical(train2[train2$ATT_FLAG == "False", col])
)
print(result)
}
for (col in cats) {
result <- t.test(
as.logical(train2[train2$ATT_FLAG == "True", col]),
as.logical(train2[train2$ATT_FLAG == "False", col])
)
print(result)
}
get(col)
print(col)
for (col in cats) {
result <- t.test(
as.logical(train2[train2$ATT_FLAG == "True", get(col)]),
as.logical(train2[train2$ATT_FLAG == "False", get(col)])
)
print(result)
}
for (col in cats) {
result <- t.test(
as.logical(train2[train2$ATT_FLAG == "True", col]),
as.logical(train2[train2$ATT_FLAG == "False", col])
)
print(col)
print(result)
}
for (col in cats) {
result <- t.test(
as.logical(train2[train2$ATT_FLAG == "True", col]),
as.logical(train2[train2$ATT_FLAG == "False", col])
)
print(col)
print(result)
}
